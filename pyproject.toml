[tool.poetry]
name = "beam-postgres-connector"
version = "0.0.0"
description = "An io connector for PostgreSQL read/write in Apache Beam pipelines."
authors = ["satokiyo <satokiyo@loop8.biz>"]
readme = "README.md"
packages = [
    {include = "beam_postgres", from = "src"},
]
license = "MIT"
keywords = ["apache beam", "beam", "postgres", "postgresql"]
homepage = "https://github.com/satokiyo/beam-postgres-connector"
repository = "https://github.com/satokiyo/beam-postgres-connector"

[tool.poetry.group.dev.dependencies]
tox = "^4.4.11"
black = "^23.3.0"
flake8 = "^6.0.0"
isort = "^5.12.0"
mypy = "^1.2.0"
pytest = "^7.3.0"
types-psycopg2 = "^2.9.21.9"
types-python-dateutil = "^2.8.19.12"
pyproject-flake8 = "^6.0.0.post1"
poetry = "^1.5.1"
poetry-dynamic-versioning = "^0.24.0"

[tool.poetry-dynamic-versioning]
enable = true
style = "pep440"
format = "{base}"

[tool.poetry.dependencies]
python = "^3.8.1"
apache-beam = "^2.46.0"
psycopg2-binary = "^2.9.6"
poetry-dynamic-versioning = "^0.24.0"

[build-system]
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning"]
build-backend = "poetry_dynamic_versioning.backend"

[tool.black]
line-length = 88

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_sort_within_sections = true

[tool.flake8]
max-line-length = 88
max-complexity = 18
ignore = "E203,E266,E402,E501,W503,"
exclude = ["__pycache__", "__init__.py"]

[tool.mypy]
no_strict_optional = true
show_error_context = false
show_column_numbers = true
ignore_missing_imports = true
no_implicit_optional = true
warn_return_any = true
warn_unused_ignores = true
warn_redundant_casts = true
implicit_reexport = true
namespace_packages = true
show_error_codes = true
strict_equality = true
warn_unreachable = true
warn_unused_configs = true
exclude = [
    "^tests/",
    "^build/",
    "^.venv/",
    "__init__.py$",
]

[[tool.mypy.overrides]]
module = "apache_beam.*"
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
pythonpath = ["src"]
#addopts = "-rsxX -l --tb=short --strict-markers -v --ff --pdb --setup-show"
testpaths = [
    "tests/",
]

[tool.tox]
legacy_tox_ini = """
[tox]
envlist =
    py38
    py39
    py310
isolated_build = true
skipsdist = true

[testenv]
allowlist_externals =
    poetry
    docker-compose
    sleep
deps =
    poetry
    pytest
setenv =
    PYTHONPATH = .
commands =
    poetry install -v --no-root
	docker-compose -f tests/docker-compose.yml up -d
	sleep 2
	poetry run python -m pytest
	docker-compose -f tests/docker-compose.yml down --volume
"""
